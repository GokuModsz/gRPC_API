// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client_Facture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_5fFacture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_5fFacture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_5fFacture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_5fFacture_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_5fFacture_2eproto;
class Facture;
struct FactureDefaultTypeInternal;
extern FactureDefaultTypeInternal _Facture_default_instance_;
class FactureId;
struct FactureIdDefaultTypeInternal;
extern FactureIdDefaultTypeInternal _FactureId_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Facture* Arena::CreateMaybeMessage<::Facture>(Arena*);
template<> ::FactureId* Arena::CreateMaybeMessage<::FactureId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Facture final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Facture) */ {
 public:
  inline Facture() : Facture(nullptr) {}
  ~Facture() override;
  explicit PROTOBUF_CONSTEXPR Facture(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Facture(const Facture& from);
  Facture(Facture&& from) noexcept
    : Facture() {
    *this = ::std::move(from);
  }

  inline Facture& operator=(const Facture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Facture& operator=(Facture&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Facture& default_instance() {
    return *internal_default_instance();
  }
  static inline const Facture* internal_default_instance() {
    return reinterpret_cast<const Facture*>(
               &_Facture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Facture& a, Facture& b) {
    a.Swap(&b);
  }
  inline void Swap(Facture* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Facture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Facture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Facture>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Facture& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Facture& from) {
    Facture::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Facture* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Facture";
  }
  protected:
  explicit Facture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactureDetailsFieldNumber = 5,
    kNameOfFactureFieldNumber = 2,
    kDirOfFactureFieldNumber = 3,
    kRefToClientFieldNumber = 4,
    kTypeIdFactureFieldNumber = 1,
  };
  // repeated string facture_details = 5;
  int facture_details_size() const;
  private:
  int _internal_facture_details_size() const;
  public:
  void clear_facture_details();
  const std::string& facture_details(int index) const;
  std::string* mutable_facture_details(int index);
  void set_facture_details(int index, const std::string& value);
  void set_facture_details(int index, std::string&& value);
  void set_facture_details(int index, const char* value);
  void set_facture_details(int index, const char* value, size_t size);
  std::string* add_facture_details();
  void add_facture_details(const std::string& value);
  void add_facture_details(std::string&& value);
  void add_facture_details(const char* value);
  void add_facture_details(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& facture_details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_facture_details();
  private:
  const std::string& _internal_facture_details(int index) const;
  std::string* _internal_add_facture_details();
  public:

  // string name_of_facture = 2;
  void clear_name_of_facture();
  const std::string& name_of_facture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_of_facture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_of_facture();
  PROTOBUF_NODISCARD std::string* release_name_of_facture();
  void set_allocated_name_of_facture(std::string* name_of_facture);
  private:
  const std::string& _internal_name_of_facture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_of_facture(const std::string& value);
  std::string* _internal_mutable_name_of_facture();
  public:

  // string dir_of_facture = 3;
  void clear_dir_of_facture();
  const std::string& dir_of_facture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir_of_facture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir_of_facture();
  PROTOBUF_NODISCARD std::string* release_dir_of_facture();
  void set_allocated_dir_of_facture(std::string* dir_of_facture);
  private:
  const std::string& _internal_dir_of_facture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir_of_facture(const std::string& value);
  std::string* _internal_mutable_dir_of_facture();
  public:

  // string ref_to_client = 4;
  void clear_ref_to_client();
  const std::string& ref_to_client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ref_to_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ref_to_client();
  PROTOBUF_NODISCARD std::string* release_ref_to_client();
  void set_allocated_ref_to_client(std::string* ref_to_client);
  private:
  const std::string& _internal_ref_to_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ref_to_client(const std::string& value);
  std::string* _internal_mutable_ref_to_client();
  public:

  // uint32 type_id_facture = 1;
  void clear_type_id_facture();
  uint32_t type_id_facture() const;
  void set_type_id_facture(uint32_t value);
  private:
  uint32_t _internal_type_id_facture() const;
  void _internal_set_type_id_facture(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Facture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> facture_details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_of_facture_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_of_facture_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_to_client_;
    uint32_t type_id_facture_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fFacture_2eproto;
};
// -------------------------------------------------------------------

class FactureId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FactureId) */ {
 public:
  inline FactureId() : FactureId(nullptr) {}
  ~FactureId() override;
  explicit PROTOBUF_CONSTEXPR FactureId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FactureId(const FactureId& from);
  FactureId(FactureId&& from) noexcept
    : FactureId() {
    *this = ::std::move(from);
  }

  inline FactureId& operator=(const FactureId& from) {
    CopyFrom(from);
    return *this;
  }
  inline FactureId& operator=(FactureId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FactureId& default_instance() {
    return *internal_default_instance();
  }
  static inline const FactureId* internal_default_instance() {
    return reinterpret_cast<const FactureId*>(
               &_FactureId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FactureId& a, FactureId& b) {
    a.Swap(&b);
  }
  inline void Swap(FactureId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FactureId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FactureId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FactureId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FactureId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FactureId& from) {
    FactureId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FactureId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FactureId";
  }
  protected:
  explicit FactureId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactureIdFieldNumber = 1,
  };
  // string facture_id = 1;
  void clear_facture_id();
  const std::string& facture_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_facture_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_facture_id();
  PROTOBUF_NODISCARD std::string* release_facture_id();
  void set_allocated_facture_id(std::string* facture_id);
  private:
  const std::string& _internal_facture_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_facture_id(const std::string& value);
  std::string* _internal_mutable_facture_id();
  public:

  // @@protoc_insertion_point(class_scope:FactureId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facture_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fFacture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Facture

// uint32 type_id_facture = 1;
inline void Facture::clear_type_id_facture() {
  _impl_.type_id_facture_ = 0u;
}
inline uint32_t Facture::_internal_type_id_facture() const {
  return _impl_.type_id_facture_;
}
inline uint32_t Facture::type_id_facture() const {
  // @@protoc_insertion_point(field_get:Facture.type_id_facture)
  return _internal_type_id_facture();
}
inline void Facture::_internal_set_type_id_facture(uint32_t value) {
  
  _impl_.type_id_facture_ = value;
}
inline void Facture::set_type_id_facture(uint32_t value) {
  _internal_set_type_id_facture(value);
  // @@protoc_insertion_point(field_set:Facture.type_id_facture)
}

// string name_of_facture = 2;
inline void Facture::clear_name_of_facture() {
  _impl_.name_of_facture_.ClearToEmpty();
}
inline const std::string& Facture::name_of_facture() const {
  // @@protoc_insertion_point(field_get:Facture.name_of_facture)
  return _internal_name_of_facture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Facture::set_name_of_facture(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_of_facture_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Facture.name_of_facture)
}
inline std::string* Facture::mutable_name_of_facture() {
  std::string* _s = _internal_mutable_name_of_facture();
  // @@protoc_insertion_point(field_mutable:Facture.name_of_facture)
  return _s;
}
inline const std::string& Facture::_internal_name_of_facture() const {
  return _impl_.name_of_facture_.Get();
}
inline void Facture::_internal_set_name_of_facture(const std::string& value) {
  
  _impl_.name_of_facture_.Set(value, GetArenaForAllocation());
}
inline std::string* Facture::_internal_mutable_name_of_facture() {
  
  return _impl_.name_of_facture_.Mutable(GetArenaForAllocation());
}
inline std::string* Facture::release_name_of_facture() {
  // @@protoc_insertion_point(field_release:Facture.name_of_facture)
  return _impl_.name_of_facture_.Release();
}
inline void Facture::set_allocated_name_of_facture(std::string* name_of_facture) {
  if (name_of_facture != nullptr) {
    
  } else {
    
  }
  _impl_.name_of_facture_.SetAllocated(name_of_facture, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_of_facture_.IsDefault()) {
    _impl_.name_of_facture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Facture.name_of_facture)
}

// string dir_of_facture = 3;
inline void Facture::clear_dir_of_facture() {
  _impl_.dir_of_facture_.ClearToEmpty();
}
inline const std::string& Facture::dir_of_facture() const {
  // @@protoc_insertion_point(field_get:Facture.dir_of_facture)
  return _internal_dir_of_facture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Facture::set_dir_of_facture(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dir_of_facture_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Facture.dir_of_facture)
}
inline std::string* Facture::mutable_dir_of_facture() {
  std::string* _s = _internal_mutable_dir_of_facture();
  // @@protoc_insertion_point(field_mutable:Facture.dir_of_facture)
  return _s;
}
inline const std::string& Facture::_internal_dir_of_facture() const {
  return _impl_.dir_of_facture_.Get();
}
inline void Facture::_internal_set_dir_of_facture(const std::string& value) {
  
  _impl_.dir_of_facture_.Set(value, GetArenaForAllocation());
}
inline std::string* Facture::_internal_mutable_dir_of_facture() {
  
  return _impl_.dir_of_facture_.Mutable(GetArenaForAllocation());
}
inline std::string* Facture::release_dir_of_facture() {
  // @@protoc_insertion_point(field_release:Facture.dir_of_facture)
  return _impl_.dir_of_facture_.Release();
}
inline void Facture::set_allocated_dir_of_facture(std::string* dir_of_facture) {
  if (dir_of_facture != nullptr) {
    
  } else {
    
  }
  _impl_.dir_of_facture_.SetAllocated(dir_of_facture, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dir_of_facture_.IsDefault()) {
    _impl_.dir_of_facture_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Facture.dir_of_facture)
}

// string ref_to_client = 4;
inline void Facture::clear_ref_to_client() {
  _impl_.ref_to_client_.ClearToEmpty();
}
inline const std::string& Facture::ref_to_client() const {
  // @@protoc_insertion_point(field_get:Facture.ref_to_client)
  return _internal_ref_to_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Facture::set_ref_to_client(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ref_to_client_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Facture.ref_to_client)
}
inline std::string* Facture::mutable_ref_to_client() {
  std::string* _s = _internal_mutable_ref_to_client();
  // @@protoc_insertion_point(field_mutable:Facture.ref_to_client)
  return _s;
}
inline const std::string& Facture::_internal_ref_to_client() const {
  return _impl_.ref_to_client_.Get();
}
inline void Facture::_internal_set_ref_to_client(const std::string& value) {
  
  _impl_.ref_to_client_.Set(value, GetArenaForAllocation());
}
inline std::string* Facture::_internal_mutable_ref_to_client() {
  
  return _impl_.ref_to_client_.Mutable(GetArenaForAllocation());
}
inline std::string* Facture::release_ref_to_client() {
  // @@protoc_insertion_point(field_release:Facture.ref_to_client)
  return _impl_.ref_to_client_.Release();
}
inline void Facture::set_allocated_ref_to_client(std::string* ref_to_client) {
  if (ref_to_client != nullptr) {
    
  } else {
    
  }
  _impl_.ref_to_client_.SetAllocated(ref_to_client, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ref_to_client_.IsDefault()) {
    _impl_.ref_to_client_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Facture.ref_to_client)
}

// repeated string facture_details = 5;
inline int Facture::_internal_facture_details_size() const {
  return _impl_.facture_details_.size();
}
inline int Facture::facture_details_size() const {
  return _internal_facture_details_size();
}
inline void Facture::clear_facture_details() {
  _impl_.facture_details_.Clear();
}
inline std::string* Facture::add_facture_details() {
  std::string* _s = _internal_add_facture_details();
  // @@protoc_insertion_point(field_add_mutable:Facture.facture_details)
  return _s;
}
inline const std::string& Facture::_internal_facture_details(int index) const {
  return _impl_.facture_details_.Get(index);
}
inline const std::string& Facture::facture_details(int index) const {
  // @@protoc_insertion_point(field_get:Facture.facture_details)
  return _internal_facture_details(index);
}
inline std::string* Facture::mutable_facture_details(int index) {
  // @@protoc_insertion_point(field_mutable:Facture.facture_details)
  return _impl_.facture_details_.Mutable(index);
}
inline void Facture::set_facture_details(int index, const std::string& value) {
  _impl_.facture_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Facture.facture_details)
}
inline void Facture::set_facture_details(int index, std::string&& value) {
  _impl_.facture_details_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Facture.facture_details)
}
inline void Facture::set_facture_details(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.facture_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Facture.facture_details)
}
inline void Facture::set_facture_details(int index, const char* value, size_t size) {
  _impl_.facture_details_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Facture.facture_details)
}
inline std::string* Facture::_internal_add_facture_details() {
  return _impl_.facture_details_.Add();
}
inline void Facture::add_facture_details(const std::string& value) {
  _impl_.facture_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Facture.facture_details)
}
inline void Facture::add_facture_details(std::string&& value) {
  _impl_.facture_details_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Facture.facture_details)
}
inline void Facture::add_facture_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.facture_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Facture.facture_details)
}
inline void Facture::add_facture_details(const char* value, size_t size) {
  _impl_.facture_details_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Facture.facture_details)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Facture::facture_details() const {
  // @@protoc_insertion_point(field_list:Facture.facture_details)
  return _impl_.facture_details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Facture::mutable_facture_details() {
  // @@protoc_insertion_point(field_mutable_list:Facture.facture_details)
  return &_impl_.facture_details_;
}

// -------------------------------------------------------------------

// FactureId

// string facture_id = 1;
inline void FactureId::clear_facture_id() {
  _impl_.facture_id_.ClearToEmpty();
}
inline const std::string& FactureId::facture_id() const {
  // @@protoc_insertion_point(field_get:FactureId.facture_id)
  return _internal_facture_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FactureId::set_facture_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.facture_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FactureId.facture_id)
}
inline std::string* FactureId::mutable_facture_id() {
  std::string* _s = _internal_mutable_facture_id();
  // @@protoc_insertion_point(field_mutable:FactureId.facture_id)
  return _s;
}
inline const std::string& FactureId::_internal_facture_id() const {
  return _impl_.facture_id_.Get();
}
inline void FactureId::_internal_set_facture_id(const std::string& value) {
  
  _impl_.facture_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FactureId::_internal_mutable_facture_id() {
  
  return _impl_.facture_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FactureId::release_facture_id() {
  // @@protoc_insertion_point(field_release:FactureId.facture_id)
  return _impl_.facture_id_.Release();
}
inline void FactureId::set_allocated_facture_id(std::string* facture_id) {
  if (facture_id != nullptr) {
    
  } else {
    
  }
  _impl_.facture_id_.SetAllocated(facture_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.facture_id_.IsDefault()) {
    _impl_.facture_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FactureId.facture_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_5fFacture_2eproto
