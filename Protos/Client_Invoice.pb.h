// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client_Invoice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_5fInvoice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_5fInvoice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_5fInvoice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_5fInvoice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_5fInvoice_2eproto;
class Invoice;
struct InvoiceDefaultTypeInternal;
extern InvoiceDefaultTypeInternal _Invoice_default_instance_;
class InvoiceId;
struct InvoiceIdDefaultTypeInternal;
extern InvoiceIdDefaultTypeInternal _InvoiceId_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Invoice* Arena::CreateMaybeMessage<::Invoice>(Arena*);
template<> ::InvoiceId* Arena::CreateMaybeMessage<::InvoiceId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Invoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Invoice) */ {
 public:
  inline Invoice() : Invoice(nullptr) {}
  ~Invoice() override;
  explicit PROTOBUF_CONSTEXPR Invoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Invoice(const Invoice& from);
  Invoice(Invoice&& from) noexcept
    : Invoice() {
    *this = ::std::move(from);
  }

  inline Invoice& operator=(const Invoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invoice& operator=(Invoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Invoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Invoice* internal_default_instance() {
    return reinterpret_cast<const Invoice*>(
               &_Invoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Invoice& a, Invoice& b) {
    a.Swap(&b);
  }
  inline void Swap(Invoice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Invoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Invoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Invoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Invoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Invoice& from) {
    Invoice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invoice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Invoice";
  }
  protected:
  explicit Invoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceDetailsFieldNumber = 5,
    kRefToProductFieldNumber = 1,
    kDiscountOfProductFieldNumber = 2,
    kAmountOfProductFieldNumber = 3,
    kTotalToPayFieldNumber = 4,
  };
  // repeated string invoice_details = 5;
  int invoice_details_size() const;
  private:
  int _internal_invoice_details_size() const;
  public:
  void clear_invoice_details();
  const std::string& invoice_details(int index) const;
  std::string* mutable_invoice_details(int index);
  void set_invoice_details(int index, const std::string& value);
  void set_invoice_details(int index, std::string&& value);
  void set_invoice_details(int index, const char* value);
  void set_invoice_details(int index, const char* value, size_t size);
  std::string* add_invoice_details();
  void add_invoice_details(const std::string& value);
  void add_invoice_details(std::string&& value);
  void add_invoice_details(const char* value);
  void add_invoice_details(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& invoice_details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_invoice_details();
  private:
  const std::string& _internal_invoice_details(int index) const;
  std::string* _internal_add_invoice_details();
  public:

  // string ref_to_product = 1;
  void clear_ref_to_product();
  const std::string& ref_to_product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ref_to_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ref_to_product();
  PROTOBUF_NODISCARD std::string* release_ref_to_product();
  void set_allocated_ref_to_product(std::string* ref_to_product);
  private:
  const std::string& _internal_ref_to_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ref_to_product(const std::string& value);
  std::string* _internal_mutable_ref_to_product();
  public:

  // int32 discount_of_product = 2;
  void clear_discount_of_product();
  int32_t discount_of_product() const;
  void set_discount_of_product(int32_t value);
  private:
  int32_t _internal_discount_of_product() const;
  void _internal_set_discount_of_product(int32_t value);
  public:

  // int32 amount_of_product = 3;
  void clear_amount_of_product();
  int32_t amount_of_product() const;
  void set_amount_of_product(int32_t value);
  private:
  int32_t _internal_amount_of_product() const;
  void _internal_set_amount_of_product(int32_t value);
  public:

  // int32 total_to_pay = 4;
  void clear_total_to_pay();
  int32_t total_to_pay() const;
  void set_total_to_pay(int32_t value);
  private:
  int32_t _internal_total_to_pay() const;
  void _internal_set_total_to_pay(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Invoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> invoice_details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_to_product_;
    int32_t discount_of_product_;
    int32_t amount_of_product_;
    int32_t total_to_pay_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fInvoice_2eproto;
};
// -------------------------------------------------------------------

class InvoiceId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InvoiceId) */ {
 public:
  inline InvoiceId() : InvoiceId(nullptr) {}
  ~InvoiceId() override;
  explicit PROTOBUF_CONSTEXPR InvoiceId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvoiceId(const InvoiceId& from);
  InvoiceId(InvoiceId&& from) noexcept
    : InvoiceId() {
    *this = ::std::move(from);
  }

  inline InvoiceId& operator=(const InvoiceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceId& operator=(InvoiceId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvoiceId& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvoiceId* internal_default_instance() {
    return reinterpret_cast<const InvoiceId*>(
               &_InvoiceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InvoiceId& a, InvoiceId& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvoiceId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvoiceId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvoiceId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvoiceId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InvoiceId& from) {
    InvoiceId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InvoiceId";
  }
  protected:
  explicit InvoiceId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceIdFieldNumber = 1,
  };
  // string invoice_id = 1;
  void clear_invoice_id();
  const std::string& invoice_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invoice_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invoice_id();
  PROTOBUF_NODISCARD std::string* release_invoice_id();
  void set_allocated_invoice_id(std::string* invoice_id);
  private:
  const std::string& _internal_invoice_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invoice_id(const std::string& value);
  std::string* _internal_mutable_invoice_id();
  public:

  // @@protoc_insertion_point(class_scope:InvoiceId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invoice_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fInvoice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Invoice

// string ref_to_product = 1;
inline void Invoice::clear_ref_to_product() {
  _impl_.ref_to_product_.ClearToEmpty();
}
inline const std::string& Invoice::ref_to_product() const {
  // @@protoc_insertion_point(field_get:Invoice.ref_to_product)
  return _internal_ref_to_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Invoice::set_ref_to_product(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ref_to_product_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Invoice.ref_to_product)
}
inline std::string* Invoice::mutable_ref_to_product() {
  std::string* _s = _internal_mutable_ref_to_product();
  // @@protoc_insertion_point(field_mutable:Invoice.ref_to_product)
  return _s;
}
inline const std::string& Invoice::_internal_ref_to_product() const {
  return _impl_.ref_to_product_.Get();
}
inline void Invoice::_internal_set_ref_to_product(const std::string& value) {
  
  _impl_.ref_to_product_.Set(value, GetArenaForAllocation());
}
inline std::string* Invoice::_internal_mutable_ref_to_product() {
  
  return _impl_.ref_to_product_.Mutable(GetArenaForAllocation());
}
inline std::string* Invoice::release_ref_to_product() {
  // @@protoc_insertion_point(field_release:Invoice.ref_to_product)
  return _impl_.ref_to_product_.Release();
}
inline void Invoice::set_allocated_ref_to_product(std::string* ref_to_product) {
  if (ref_to_product != nullptr) {
    
  } else {
    
  }
  _impl_.ref_to_product_.SetAllocated(ref_to_product, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ref_to_product_.IsDefault()) {
    _impl_.ref_to_product_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Invoice.ref_to_product)
}

// int32 discount_of_product = 2;
inline void Invoice::clear_discount_of_product() {
  _impl_.discount_of_product_ = 0;
}
inline int32_t Invoice::_internal_discount_of_product() const {
  return _impl_.discount_of_product_;
}
inline int32_t Invoice::discount_of_product() const {
  // @@protoc_insertion_point(field_get:Invoice.discount_of_product)
  return _internal_discount_of_product();
}
inline void Invoice::_internal_set_discount_of_product(int32_t value) {
  
  _impl_.discount_of_product_ = value;
}
inline void Invoice::set_discount_of_product(int32_t value) {
  _internal_set_discount_of_product(value);
  // @@protoc_insertion_point(field_set:Invoice.discount_of_product)
}

// int32 amount_of_product = 3;
inline void Invoice::clear_amount_of_product() {
  _impl_.amount_of_product_ = 0;
}
inline int32_t Invoice::_internal_amount_of_product() const {
  return _impl_.amount_of_product_;
}
inline int32_t Invoice::amount_of_product() const {
  // @@protoc_insertion_point(field_get:Invoice.amount_of_product)
  return _internal_amount_of_product();
}
inline void Invoice::_internal_set_amount_of_product(int32_t value) {
  
  _impl_.amount_of_product_ = value;
}
inline void Invoice::set_amount_of_product(int32_t value) {
  _internal_set_amount_of_product(value);
  // @@protoc_insertion_point(field_set:Invoice.amount_of_product)
}

// int32 total_to_pay = 4;
inline void Invoice::clear_total_to_pay() {
  _impl_.total_to_pay_ = 0;
}
inline int32_t Invoice::_internal_total_to_pay() const {
  return _impl_.total_to_pay_;
}
inline int32_t Invoice::total_to_pay() const {
  // @@protoc_insertion_point(field_get:Invoice.total_to_pay)
  return _internal_total_to_pay();
}
inline void Invoice::_internal_set_total_to_pay(int32_t value) {
  
  _impl_.total_to_pay_ = value;
}
inline void Invoice::set_total_to_pay(int32_t value) {
  _internal_set_total_to_pay(value);
  // @@protoc_insertion_point(field_set:Invoice.total_to_pay)
}

// repeated string invoice_details = 5;
inline int Invoice::_internal_invoice_details_size() const {
  return _impl_.invoice_details_.size();
}
inline int Invoice::invoice_details_size() const {
  return _internal_invoice_details_size();
}
inline void Invoice::clear_invoice_details() {
  _impl_.invoice_details_.Clear();
}
inline std::string* Invoice::add_invoice_details() {
  std::string* _s = _internal_add_invoice_details();
  // @@protoc_insertion_point(field_add_mutable:Invoice.invoice_details)
  return _s;
}
inline const std::string& Invoice::_internal_invoice_details(int index) const {
  return _impl_.invoice_details_.Get(index);
}
inline const std::string& Invoice::invoice_details(int index) const {
  // @@protoc_insertion_point(field_get:Invoice.invoice_details)
  return _internal_invoice_details(index);
}
inline std::string* Invoice::mutable_invoice_details(int index) {
  // @@protoc_insertion_point(field_mutable:Invoice.invoice_details)
  return _impl_.invoice_details_.Mutable(index);
}
inline void Invoice::set_invoice_details(int index, const std::string& value) {
  _impl_.invoice_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Invoice.invoice_details)
}
inline void Invoice::set_invoice_details(int index, std::string&& value) {
  _impl_.invoice_details_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Invoice.invoice_details)
}
inline void Invoice::set_invoice_details(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invoice_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Invoice.invoice_details)
}
inline void Invoice::set_invoice_details(int index, const char* value, size_t size) {
  _impl_.invoice_details_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Invoice.invoice_details)
}
inline std::string* Invoice::_internal_add_invoice_details() {
  return _impl_.invoice_details_.Add();
}
inline void Invoice::add_invoice_details(const std::string& value) {
  _impl_.invoice_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Invoice.invoice_details)
}
inline void Invoice::add_invoice_details(std::string&& value) {
  _impl_.invoice_details_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Invoice.invoice_details)
}
inline void Invoice::add_invoice_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.invoice_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Invoice.invoice_details)
}
inline void Invoice::add_invoice_details(const char* value, size_t size) {
  _impl_.invoice_details_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Invoice.invoice_details)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Invoice::invoice_details() const {
  // @@protoc_insertion_point(field_list:Invoice.invoice_details)
  return _impl_.invoice_details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Invoice::mutable_invoice_details() {
  // @@protoc_insertion_point(field_mutable_list:Invoice.invoice_details)
  return &_impl_.invoice_details_;
}

// -------------------------------------------------------------------

// InvoiceId

// string invoice_id = 1;
inline void InvoiceId::clear_invoice_id() {
  _impl_.invoice_id_.ClearToEmpty();
}
inline const std::string& InvoiceId::invoice_id() const {
  // @@protoc_insertion_point(field_get:InvoiceId.invoice_id)
  return _internal_invoice_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvoiceId::set_invoice_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.invoice_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InvoiceId.invoice_id)
}
inline std::string* InvoiceId::mutable_invoice_id() {
  std::string* _s = _internal_mutable_invoice_id();
  // @@protoc_insertion_point(field_mutable:InvoiceId.invoice_id)
  return _s;
}
inline const std::string& InvoiceId::_internal_invoice_id() const {
  return _impl_.invoice_id_.Get();
}
inline void InvoiceId::_internal_set_invoice_id(const std::string& value) {
  
  _impl_.invoice_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InvoiceId::_internal_mutable_invoice_id() {
  
  return _impl_.invoice_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InvoiceId::release_invoice_id() {
  // @@protoc_insertion_point(field_release:InvoiceId.invoice_id)
  return _impl_.invoice_id_.Release();
}
inline void InvoiceId::set_allocated_invoice_id(std::string* invoice_id) {
  if (invoice_id != nullptr) {
    
  } else {
    
  }
  _impl_.invoice_id_.SetAllocated(invoice_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.invoice_id_.IsDefault()) {
    _impl_.invoice_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InvoiceId.invoice_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_5fInvoice_2eproto
