// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AllServices.proto
// Original file comments:
// Todos los Servicios a usar del Servidor.
#ifndef GRPC_AllServices_2eproto__INCLUDED
#define GRPC_AllServices_2eproto__INCLUDED

#include "AllServices.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace TEST_API_GRPC {

// Servicios de Todos los .protos
// Servicio ClientService.
class ClientService final {
 public:
  static constexpr char const* service_full_name() {
    return "TEST_API_GRPC.ClientService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateClient(::grpc::ClientContext* context, const ::Client& request, ::TEST_API_GRPC::ServiceStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateClient(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateClient(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateClientRaw(context, request, cq));
    }
    virtual ::grpc::Status ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListClientResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>> AsyncListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>>(AsyncListClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>> PrepareAsyncListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>>(PrepareAsyncListClientRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateClient(::grpc::ClientContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateClient(::grpc::ClientContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateClientRaw(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateClientRaw(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>* AsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>* PrepareAsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateClient(::grpc::ClientContext* context, const ::Client& request, ::TEST_API_GRPC::ServiceStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateClient(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateClient(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateClientRaw(context, request, cq));
    }
    ::grpc::Status ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListClientResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListClientResponse>> AsyncListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListClientResponse>>(AsyncListClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListClientResponse>> PrepareAsyncListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListClientResponse>>(PrepareAsyncListClientRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateClient(::grpc::ClientContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) override;
      void CreateClient(::grpc::ClientContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response, std::function<void(::grpc::Status)>) override;
      void ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateClientRaw(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateClientRaw(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListClientResponse>* AsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListClientResponse>* PrepareAsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateClient_;
    const ::grpc::internal::RpcMethod rpcmethod_ListClient_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateClient(::grpc::ServerContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response);
    virtual ::grpc::Status ListClient(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::Client* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateClient(::grpc::ServerContext* context, ::Client* request, ::grpc::ServerAsyncResponseWriter< ::TEST_API_GRPC::ServiceStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListClient() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClient(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListClient(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::ListClientResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateClient<WithAsyncMethod_ListClient<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Client, ::TEST_API_GRPC::ServiceStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response) { return this->CreateClient(context, request, response); }));}
    void SetMessageAllocatorFor_CreateClient(
        ::grpc::MessageAllocator< ::Client, ::TEST_API_GRPC::ServiceStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Client, ::TEST_API_GRPC::ServiceStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::Client* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateClient(
      ::grpc::CallbackServerContext* /*context*/, const ::Client* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListClient() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListClientResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response) { return this->ListClient(context, request, response); }));}
    void SetMessageAllocatorFor_ListClient(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::ListClientResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListClientResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClient(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListClient(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListClientResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateClient<WithCallbackMethod_ListClient<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::Client* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListClient() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClient(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::Client* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListClient() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClient(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::Client* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListClient() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClient(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Client, ::TEST_API_GRPC::ServiceStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Client, ::TEST_API_GRPC::ServiceStatus>* streamer) {
                       return this->StreamedCreateClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::Client* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Client,::TEST_API_GRPC::ServiceStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListClient() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::ListClientResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::ListClientResponse>* streamer) {
                       return this->StreamedListClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListClient(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::ListClientResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateClient<WithStreamedUnaryMethod_ListClient<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateClient<WithStreamedUnaryMethod_ListClient<Service > > StreamedService;
};

// Servicio ProductService.
class ProductService final {
 public:
  static constexpr char const* service_full_name() {
    return "TEST_API_GRPC.ProductService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::Product& request, ::TEST_API_GRPC::ServiceStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateProduct(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    virtual ::grpc::Status ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>> AsyncListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>>(AsyncListProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>> PrepareAsyncListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>>(PrepareAsyncListProductRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateProduct(::grpc::ClientContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProduct(::grpc::ClientContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>* AsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>* PrepareAsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::Product& request, ::TEST_API_GRPC::ServiceStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateProduct(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    ::grpc::Status ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProductResponse>> AsyncListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProductResponse>>(AsyncListProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProductResponse>> PrepareAsyncListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProductResponse>>(PrepareAsyncListProductRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateProduct(::grpc::ClientContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) override;
      void CreateProduct(::grpc::ClientContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response, std::function<void(::grpc::Status)>) override;
      void ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListProductResponse>* AsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListProductResponse>* PrepareAsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProduct_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateProduct(::grpc::ServerContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response);
    virtual ::grpc::Status ListProduct(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateProduct() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::Product* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::Product* request, ::grpc::ServerAsyncResponseWriter< ::TEST_API_GRPC::ServiceStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListProduct() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProduct(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProduct(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::ListProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateProduct<WithAsyncMethod_ListProduct<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Product, ::TEST_API_GRPC::ServiceStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response) { return this->CreateProduct(context, request, response); }));}
    void SetMessageAllocatorFor_CreateProduct(
        ::grpc::MessageAllocator< ::Product, ::TEST_API_GRPC::ServiceStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Product, ::TEST_API_GRPC::ServiceStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::Product* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::Product* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListProduct() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListProductResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response) { return this->ListProduct(context, request, response); }));}
    void SetMessageAllocatorFor_ListProduct(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::ListProductResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProduct(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListProductResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateProduct<WithCallbackMethod_ListProduct<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateProduct() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::Product* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListProduct() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProduct(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::Product* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListProduct() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProduct(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::Product* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListProduct() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProduct(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateProduct() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Product, ::TEST_API_GRPC::ServiceStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Product, ::TEST_API_GRPC::ServiceStatus>* streamer) {
                       return this->StreamedCreateProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::Product* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Product,::TEST_API_GRPC::ServiceStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListProduct() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::ListProductResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::ListProductResponse>* streamer) {
                       return this->StreamedListProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProduct(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::ListProductResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_ListProduct<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_ListProduct<Service > > StreamedService;
};

// Servicio FactureService.
class FactureService final {
 public:
  static constexpr char const* service_full_name() {
    return "TEST_API_GRPC.FactureService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateFacture(::grpc::ClientContext* context, const ::Facture& request, ::TEST_API_GRPC::ServiceStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateFacture(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateFactureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateFacture(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateFactureRaw(context, request, cq));
    }
    virtual ::grpc::Status ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListFactureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>> AsyncListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>>(AsyncListFactureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>> PrepareAsyncListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>>(PrepareAsyncListFactureRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateFacture(::grpc::ClientContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFacture(::grpc::ClientContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateFactureRaw(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateFactureRaw(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>* AsyncListFactureRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>* PrepareAsyncListFactureRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateFacture(::grpc::ClientContext* context, const ::Facture& request, ::TEST_API_GRPC::ServiceStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateFacture(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateFactureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateFacture(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateFactureRaw(context, request, cq));
    }
    ::grpc::Status ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListFactureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListFactureResponse>> AsyncListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListFactureResponse>>(AsyncListFactureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListFactureResponse>> PrepareAsyncListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListFactureResponse>>(PrepareAsyncListFactureRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateFacture(::grpc::ClientContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) override;
      void CreateFacture(::grpc::ClientContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response, std::function<void(::grpc::Status)>) override;
      void ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateFactureRaw(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateFactureRaw(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListFactureResponse>* AsyncListFactureRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListFactureResponse>* PrepareAsyncListFactureRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFacture_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFacture_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateFacture(::grpc::ServerContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response);
    virtual ::grpc::Status ListFacture(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFacture() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFacture(::grpc::ServerContext* /*context*/, const ::Facture* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFacture(::grpc::ServerContext* context, ::Facture* request, ::grpc::ServerAsyncResponseWriter< ::TEST_API_GRPC::ServiceStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListFacture() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFacture(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListFactureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFacture(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::ListFactureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateFacture<WithAsyncMethod_ListFacture<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFacture() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Facture, ::TEST_API_GRPC::ServiceStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response) { return this->CreateFacture(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFacture(
        ::grpc::MessageAllocator< ::Facture, ::TEST_API_GRPC::ServiceStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Facture, ::TEST_API_GRPC::ServiceStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFacture(::grpc::ServerContext* /*context*/, const ::Facture* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFacture(
      ::grpc::CallbackServerContext* /*context*/, const ::Facture* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListFacture() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListFactureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response) { return this->ListFacture(context, request, response); }));}
    void SetMessageAllocatorFor_ListFacture(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::ListFactureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListFactureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFacture(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListFactureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFacture(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListFactureResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateFacture<WithCallbackMethod_ListFacture<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFacture() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFacture(::grpc::ServerContext* /*context*/, const ::Facture* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListFacture() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFacture(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListFactureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFacture() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFacture(::grpc::ServerContext* /*context*/, const ::Facture* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFacture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListFacture() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFacture(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListFactureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFacture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFacture() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFacture(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFacture(::grpc::ServerContext* /*context*/, const ::Facture* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFacture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListFacture() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListFacture(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFacture(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListFactureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFacture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFacture() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Facture, ::TEST_API_GRPC::ServiceStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Facture, ::TEST_API_GRPC::ServiceStatus>* streamer) {
                       return this->StreamedCreateFacture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFacture(::grpc::ServerContext* /*context*/, const ::Facture* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFacture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Facture,::TEST_API_GRPC::ServiceStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFacture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListFacture() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::ListFactureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::ListFactureResponse>* streamer) {
                       return this->StreamedListFacture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListFacture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFacture(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListFactureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFacture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::ListFactureResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateFacture<WithStreamedUnaryMethod_ListFacture<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateFacture<WithStreamedUnaryMethod_ListFacture<Service > > StreamedService;
};

// Servicio InvoiceService.
class InvoiceService final {
 public:
  static constexpr char const* service_full_name() {
    return "TEST_API_GRPC.InvoiceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateInvoice(::grpc::ClientContext* context, const ::Invoice& request, ::TEST_API_GRPC::ServiceStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateInvoice(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateInvoice(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateInvoiceRaw(context, request, cq));
    }
    virtual ::grpc::Status ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListInvoiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>> AsyncListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>>(AsyncListInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>> PrepareAsyncListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>>(PrepareAsyncListInvoiceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateInvoice(::grpc::ClientContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateInvoice(::grpc::ClientContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>* AsyncListInvoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>* PrepareAsyncListInvoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateInvoice(::grpc::ClientContext* context, const ::Invoice& request, ::TEST_API_GRPC::ServiceStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> AsyncCreateInvoice(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(AsyncCreateInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>> PrepareAsyncCreateInvoice(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>>(PrepareAsyncCreateInvoiceRaw(context, request, cq));
    }
    ::grpc::Status ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListInvoiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>> AsyncListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>>(AsyncListInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>> PrepareAsyncListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>>(PrepareAsyncListInvoiceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateInvoice(::grpc::ClientContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)>) override;
      void CreateInvoice(::grpc::ClientContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response, std::function<void(::grpc::Status)>) override;
      void ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* AsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* PrepareAsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>* AsyncListInvoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>* PrepareAsyncListInvoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInvoice_;
    const ::grpc::internal::RpcMethod rpcmethod_ListInvoice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateInvoice(::grpc::ServerContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response);
    virtual ::grpc::Status ListInvoice(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* /*context*/, const ::Invoice* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInvoice(::grpc::ServerContext* context, ::Invoice* request, ::grpc::ServerAsyncResponseWriter< ::TEST_API_GRPC::ServiceStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListInvoice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInvoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInvoice(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::ListInvoiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateInvoice<WithAsyncMethod_ListInvoice<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Invoice, ::TEST_API_GRPC::ServiceStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response) { return this->CreateInvoice(context, request, response); }));}
    void SetMessageAllocatorFor_CreateInvoice(
        ::grpc::MessageAllocator< ::Invoice, ::TEST_API_GRPC::ServiceStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Invoice, ::TEST_API_GRPC::ServiceStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* /*context*/, const ::Invoice* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::Invoice* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListInvoice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListInvoiceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response) { return this->ListInvoice(context, request, response); }));}
    void SetMessageAllocatorFor_ListInvoice(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::ListInvoiceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ListInvoiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInvoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListInvoiceResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateInvoice<WithCallbackMethod_ListInvoice<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* /*context*/, const ::Invoice* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListInvoice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInvoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* /*context*/, const ::Invoice* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListInvoice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInvoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateInvoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* /*context*/, const ::Invoice* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListInvoice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListInvoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInvoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateInvoice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Invoice, ::TEST_API_GRPC::ServiceStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Invoice, ::TEST_API_GRPC::ServiceStatus>* streamer) {
                       return this->StreamedCreateInvoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInvoice(::grpc::ServerContext* /*context*/, const ::Invoice* /*request*/, ::TEST_API_GRPC::ServiceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInvoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Invoice,::TEST_API_GRPC::ServiceStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListInvoice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::ListInvoiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::ListInvoiceResponse>* streamer) {
                       return this->StreamedListInvoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInvoice(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ListInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInvoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::ListInvoiceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateInvoice<WithStreamedUnaryMethod_ListInvoice<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateInvoice<WithStreamedUnaryMethod_ListInvoice<Service > > StreamedService;
};

}  // namespace TEST_API_GRPC


#endif  // GRPC_AllServices_2eproto__INCLUDED
