// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client_Product.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_5fProduct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_5fProduct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_5fProduct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_5fProduct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_5fProduct_2eproto;
class Product;
struct ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class ProductId;
struct ProductIdDefaultTypeInternal;
extern ProductIdDefaultTypeInternal _ProductId_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Product* Arena::CreateMaybeMessage<::Product>(Arena*);
template<> ::ProductId* Arena::CreateMaybeMessage<::ProductId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Product final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Product) */ {
 public:
  inline Product() : Product(nullptr) {}
  ~Product() override;
  explicit PROTOBUF_CONSTEXPR Product(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Product(const Product& from);
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  inline Product& operator=(Product&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Product& default_instance() {
    return *internal_default_instance();
  }
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }
  inline void Swap(Product* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Product* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Product* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Product& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Product& from) {
    Product::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Product";
  }
  protected:
  explicit Product(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductDetailsFieldNumber = 4,
    kTypeIdProductFieldNumber = 1,
    kNameOfProductFieldNumber = 2,
    kPriceOfProductFieldNumber = 3,
  };
  // repeated string product_details = 4;
  int product_details_size() const;
  private:
  int _internal_product_details_size() const;
  public:
  void clear_product_details();
  const std::string& product_details(int index) const;
  std::string* mutable_product_details(int index);
  void set_product_details(int index, const std::string& value);
  void set_product_details(int index, std::string&& value);
  void set_product_details(int index, const char* value);
  void set_product_details(int index, const char* value, size_t size);
  std::string* add_product_details();
  void add_product_details(const std::string& value);
  void add_product_details(std::string&& value);
  void add_product_details(const char* value);
  void add_product_details(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& product_details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_product_details();
  private:
  const std::string& _internal_product_details(int index) const;
  std::string* _internal_add_product_details();
  public:

  // string type_id_product = 1;
  void clear_type_id_product();
  const std::string& type_id_product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_id_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_id_product();
  PROTOBUF_NODISCARD std::string* release_type_id_product();
  void set_allocated_type_id_product(std::string* type_id_product);
  private:
  const std::string& _internal_type_id_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_id_product(const std::string& value);
  std::string* _internal_mutable_type_id_product();
  public:

  // string name_of_product = 2;
  void clear_name_of_product();
  const std::string& name_of_product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_of_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_of_product();
  PROTOBUF_NODISCARD std::string* release_name_of_product();
  void set_allocated_name_of_product(std::string* name_of_product);
  private:
  const std::string& _internal_name_of_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_of_product(const std::string& value);
  std::string* _internal_mutable_name_of_product();
  public:

  // int32 price_of_product = 3;
  void clear_price_of_product();
  int32_t price_of_product() const;
  void set_price_of_product(int32_t value);
  private:
  int32_t _internal_price_of_product() const;
  void _internal_set_price_of_product(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Product)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> product_details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_id_product_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_of_product_;
    int32_t price_of_product_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fProduct_2eproto;
};
// -------------------------------------------------------------------

class ProductId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProductId) */ {
 public:
  inline ProductId() : ProductId(nullptr) {}
  ~ProductId() override;
  explicit PROTOBUF_CONSTEXPR ProductId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductId(const ProductId& from);
  ProductId(ProductId&& from) noexcept
    : ProductId() {
    *this = ::std::move(from);
  }

  inline ProductId& operator=(const ProductId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductId& operator=(ProductId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductId* internal_default_instance() {
    return reinterpret_cast<const ProductId*>(
               &_ProductId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProductId& a, ProductId& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductId& from) {
    ProductId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProductId";
  }
  protected:
  explicit ProductId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
  };
  // string product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_NODISCARD std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // @@protoc_insertion_point(class_scope:ProductId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fProduct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Product

// string type_id_product = 1;
inline void Product::clear_type_id_product() {
  _impl_.type_id_product_.ClearToEmpty();
}
inline const std::string& Product::type_id_product() const {
  // @@protoc_insertion_point(field_get:Product.type_id_product)
  return _internal_type_id_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_type_id_product(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_id_product_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Product.type_id_product)
}
inline std::string* Product::mutable_type_id_product() {
  std::string* _s = _internal_mutable_type_id_product();
  // @@protoc_insertion_point(field_mutable:Product.type_id_product)
  return _s;
}
inline const std::string& Product::_internal_type_id_product() const {
  return _impl_.type_id_product_.Get();
}
inline void Product::_internal_set_type_id_product(const std::string& value) {
  
  _impl_.type_id_product_.Set(value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_type_id_product() {
  
  return _impl_.type_id_product_.Mutable(GetArenaForAllocation());
}
inline std::string* Product::release_type_id_product() {
  // @@protoc_insertion_point(field_release:Product.type_id_product)
  return _impl_.type_id_product_.Release();
}
inline void Product::set_allocated_type_id_product(std::string* type_id_product) {
  if (type_id_product != nullptr) {
    
  } else {
    
  }
  _impl_.type_id_product_.SetAllocated(type_id_product, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_id_product_.IsDefault()) {
    _impl_.type_id_product_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Product.type_id_product)
}

// string name_of_product = 2;
inline void Product::clear_name_of_product() {
  _impl_.name_of_product_.ClearToEmpty();
}
inline const std::string& Product::name_of_product() const {
  // @@protoc_insertion_point(field_get:Product.name_of_product)
  return _internal_name_of_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Product::set_name_of_product(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_of_product_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Product.name_of_product)
}
inline std::string* Product::mutable_name_of_product() {
  std::string* _s = _internal_mutable_name_of_product();
  // @@protoc_insertion_point(field_mutable:Product.name_of_product)
  return _s;
}
inline const std::string& Product::_internal_name_of_product() const {
  return _impl_.name_of_product_.Get();
}
inline void Product::_internal_set_name_of_product(const std::string& value) {
  
  _impl_.name_of_product_.Set(value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_name_of_product() {
  
  return _impl_.name_of_product_.Mutable(GetArenaForAllocation());
}
inline std::string* Product::release_name_of_product() {
  // @@protoc_insertion_point(field_release:Product.name_of_product)
  return _impl_.name_of_product_.Release();
}
inline void Product::set_allocated_name_of_product(std::string* name_of_product) {
  if (name_of_product != nullptr) {
    
  } else {
    
  }
  _impl_.name_of_product_.SetAllocated(name_of_product, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_of_product_.IsDefault()) {
    _impl_.name_of_product_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Product.name_of_product)
}

// int32 price_of_product = 3;
inline void Product::clear_price_of_product() {
  _impl_.price_of_product_ = 0;
}
inline int32_t Product::_internal_price_of_product() const {
  return _impl_.price_of_product_;
}
inline int32_t Product::price_of_product() const {
  // @@protoc_insertion_point(field_get:Product.price_of_product)
  return _internal_price_of_product();
}
inline void Product::_internal_set_price_of_product(int32_t value) {
  
  _impl_.price_of_product_ = value;
}
inline void Product::set_price_of_product(int32_t value) {
  _internal_set_price_of_product(value);
  // @@protoc_insertion_point(field_set:Product.price_of_product)
}

// repeated string product_details = 4;
inline int Product::_internal_product_details_size() const {
  return _impl_.product_details_.size();
}
inline int Product::product_details_size() const {
  return _internal_product_details_size();
}
inline void Product::clear_product_details() {
  _impl_.product_details_.Clear();
}
inline std::string* Product::add_product_details() {
  std::string* _s = _internal_add_product_details();
  // @@protoc_insertion_point(field_add_mutable:Product.product_details)
  return _s;
}
inline const std::string& Product::_internal_product_details(int index) const {
  return _impl_.product_details_.Get(index);
}
inline const std::string& Product::product_details(int index) const {
  // @@protoc_insertion_point(field_get:Product.product_details)
  return _internal_product_details(index);
}
inline std::string* Product::mutable_product_details(int index) {
  // @@protoc_insertion_point(field_mutable:Product.product_details)
  return _impl_.product_details_.Mutable(index);
}
inline void Product::set_product_details(int index, const std::string& value) {
  _impl_.product_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Product.product_details)
}
inline void Product::set_product_details(int index, std::string&& value) {
  _impl_.product_details_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Product.product_details)
}
inline void Product::set_product_details(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.product_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Product.product_details)
}
inline void Product::set_product_details(int index, const char* value, size_t size) {
  _impl_.product_details_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Product.product_details)
}
inline std::string* Product::_internal_add_product_details() {
  return _impl_.product_details_.Add();
}
inline void Product::add_product_details(const std::string& value) {
  _impl_.product_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Product.product_details)
}
inline void Product::add_product_details(std::string&& value) {
  _impl_.product_details_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Product.product_details)
}
inline void Product::add_product_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.product_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Product.product_details)
}
inline void Product::add_product_details(const char* value, size_t size) {
  _impl_.product_details_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Product.product_details)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Product::product_details() const {
  // @@protoc_insertion_point(field_list:Product.product_details)
  return _impl_.product_details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Product::mutable_product_details() {
  // @@protoc_insertion_point(field_mutable_list:Product.product_details)
  return &_impl_.product_details_;
}

// -------------------------------------------------------------------

// ProductId

// string product_id = 1;
inline void ProductId::clear_product_id() {
  _impl_.product_id_.ClearToEmpty();
}
inline const std::string& ProductId::product_id() const {
  // @@protoc_insertion_point(field_get:ProductId.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductId::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.product_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProductId.product_id)
}
inline std::string* ProductId::mutable_product_id() {
  std::string* _s = _internal_mutable_product_id();
  // @@protoc_insertion_point(field_mutable:ProductId.product_id)
  return _s;
}
inline const std::string& ProductId::_internal_product_id() const {
  return _impl_.product_id_.Get();
}
inline void ProductId::_internal_set_product_id(const std::string& value) {
  
  _impl_.product_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductId::_internal_mutable_product_id() {
  
  return _impl_.product_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductId::release_product_id() {
  // @@protoc_insertion_point(field_release:ProductId.product_id)
  return _impl_.product_id_.Release();
}
inline void ProductId::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  _impl_.product_id_.SetAllocated(product_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_id_.IsDefault()) {
    _impl_.product_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProductId.product_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_5fProduct_2eproto
