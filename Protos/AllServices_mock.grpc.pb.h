// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AllServices.proto

#include "AllServices.pb.h"
#include "AllServices.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace TEST_API_GRPC {

class MockClientServiceStub : public ClientService::StubInterface {
 public:
  MOCK_METHOD3(CreateClient, ::grpc::Status(::grpc::ClientContext* context, const ::Client& request, ::TEST_API_GRPC::ServiceStatus* response));
  MOCK_METHOD3(AsyncCreateClientRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCreateClientRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ListClient, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListClientResponse* response));
  MOCK_METHOD3(AsyncListClientRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncListClientRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListClientResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

class MockProductServiceStub : public ProductService::StubInterface {
 public:
  MOCK_METHOD3(CreateProduct, ::grpc::Status(::grpc::ClientContext* context, const ::Product& request, ::TEST_API_GRPC::ServiceStatus* response));
  MOCK_METHOD3(AsyncCreateProductRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCreateProductRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ListProduct, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListProductResponse* response));
  MOCK_METHOD3(AsyncListProductRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncListProductRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListProductResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

class MockFactureServiceStub : public FactureService::StubInterface {
 public:
  MOCK_METHOD3(CreateFacture, ::grpc::Status(::grpc::ClientContext* context, const ::Facture& request, ::TEST_API_GRPC::ServiceStatus* response));
  MOCK_METHOD3(AsyncCreateFactureRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCreateFactureRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ListFacture, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListFactureResponse* response));
  MOCK_METHOD3(AsyncListFactureRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncListFactureRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListFactureResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

class MockInvoiceServiceStub : public InvoiceService::StubInterface {
 public:
  MOCK_METHOD3(CreateInvoice, ::grpc::Status(::grpc::ClientContext* context, const ::Invoice& request, ::TEST_API_GRPC::ServiceStatus* response));
  MOCK_METHOD3(AsyncCreateInvoiceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCreateInvoiceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::TEST_API_GRPC::ServiceStatus>*(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ListInvoice, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListInvoiceResponse* response));
  MOCK_METHOD3(AsyncListInvoiceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncListInvoiceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ListInvoiceResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

} // namespace TEST_API_GRPC

