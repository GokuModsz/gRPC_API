// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client_Register.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_5fRegister_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_5fRegister_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_5fRegister_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_5fRegister_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_5fRegister_2eproto;
class Client;
struct ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class ClienteId;
struct ClienteIdDefaultTypeInternal;
extern ClienteIdDefaultTypeInternal _ClienteId_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Client* Arena::CreateMaybeMessage<::Client>(Arena*);
template<> ::ClienteId* Arena::CreateMaybeMessage<::ClienteId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Client final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client) */ {
 public:
  inline Client() : Client(nullptr) {}
  ~Client() override;
  explicit PROTOBUF_CONSTEXPR Client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Client& default_instance() {
    return *internal_default_instance();
  }
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Client& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Client& from) {
    Client::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client";
  }
  protected:
  explicit Client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientsDetailsFieldNumber = 5,
    kNameOfClientFieldNumber = 2,
    kCellphoneOfClientFieldNumber = 3,
    kEmailOfClientFieldNumber = 4,
    kTypeIdClientFieldNumber = 1,
  };
  // repeated string clients_details = 5;
  int clients_details_size() const;
  private:
  int _internal_clients_details_size() const;
  public:
  void clear_clients_details();
  const std::string& clients_details(int index) const;
  std::string* mutable_clients_details(int index);
  void set_clients_details(int index, const std::string& value);
  void set_clients_details(int index, std::string&& value);
  void set_clients_details(int index, const char* value);
  void set_clients_details(int index, const char* value, size_t size);
  std::string* add_clients_details();
  void add_clients_details(const std::string& value);
  void add_clients_details(std::string&& value);
  void add_clients_details(const char* value);
  void add_clients_details(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clients_details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clients_details();
  private:
  const std::string& _internal_clients_details(int index) const;
  std::string* _internal_add_clients_details();
  public:

  // string name_of_client = 2;
  void clear_name_of_client();
  const std::string& name_of_client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_of_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_of_client();
  PROTOBUF_NODISCARD std::string* release_name_of_client();
  void set_allocated_name_of_client(std::string* name_of_client);
  private:
  const std::string& _internal_name_of_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_of_client(const std::string& value);
  std::string* _internal_mutable_name_of_client();
  public:

  // string cellphone_of_client = 3;
  void clear_cellphone_of_client();
  const std::string& cellphone_of_client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cellphone_of_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cellphone_of_client();
  PROTOBUF_NODISCARD std::string* release_cellphone_of_client();
  void set_allocated_cellphone_of_client(std::string* cellphone_of_client);
  private:
  const std::string& _internal_cellphone_of_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cellphone_of_client(const std::string& value);
  std::string* _internal_mutable_cellphone_of_client();
  public:

  // string email_of_client = 4;
  void clear_email_of_client();
  const std::string& email_of_client() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email_of_client(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email_of_client();
  PROTOBUF_NODISCARD std::string* release_email_of_client();
  void set_allocated_email_of_client(std::string* email_of_client);
  private:
  const std::string& _internal_email_of_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email_of_client(const std::string& value);
  std::string* _internal_mutable_email_of_client();
  public:

  // uint32 type_id_client = 1;
  void clear_type_id_client();
  uint32_t type_id_client() const;
  void set_type_id_client(uint32_t value);
  private:
  uint32_t _internal_type_id_client() const;
  void _internal_set_type_id_client(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clients_details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_of_client_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cellphone_of_client_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_of_client_;
    uint32_t type_id_client_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fRegister_2eproto;
};
// -------------------------------------------------------------------

class ClienteId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClienteId) */ {
 public:
  inline ClienteId() : ClienteId(nullptr) {}
  ~ClienteId() override;
  explicit PROTOBUF_CONSTEXPR ClienteId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClienteId(const ClienteId& from);
  ClienteId(ClienteId&& from) noexcept
    : ClienteId() {
    *this = ::std::move(from);
  }

  inline ClienteId& operator=(const ClienteId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClienteId& operator=(ClienteId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClienteId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClienteId* internal_default_instance() {
    return reinterpret_cast<const ClienteId*>(
               &_ClienteId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClienteId& a, ClienteId& b) {
    a.Swap(&b);
  }
  inline void Swap(ClienteId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClienteId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClienteId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClienteId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClienteId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClienteId& from) {
    ClienteId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClienteId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClienteId";
  }
  protected:
  explicit ClienteId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:ClienteId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_5fRegister_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Client

// uint32 type_id_client = 1;
inline void Client::clear_type_id_client() {
  _impl_.type_id_client_ = 0u;
}
inline uint32_t Client::_internal_type_id_client() const {
  return _impl_.type_id_client_;
}
inline uint32_t Client::type_id_client() const {
  // @@protoc_insertion_point(field_get:Client.type_id_client)
  return _internal_type_id_client();
}
inline void Client::_internal_set_type_id_client(uint32_t value) {
  
  _impl_.type_id_client_ = value;
}
inline void Client::set_type_id_client(uint32_t value) {
  _internal_set_type_id_client(value);
  // @@protoc_insertion_point(field_set:Client.type_id_client)
}

// string name_of_client = 2;
inline void Client::clear_name_of_client() {
  _impl_.name_of_client_.ClearToEmpty();
}
inline const std::string& Client::name_of_client() const {
  // @@protoc_insertion_point(field_get:Client.name_of_client)
  return _internal_name_of_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Client::set_name_of_client(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_of_client_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client.name_of_client)
}
inline std::string* Client::mutable_name_of_client() {
  std::string* _s = _internal_mutable_name_of_client();
  // @@protoc_insertion_point(field_mutable:Client.name_of_client)
  return _s;
}
inline const std::string& Client::_internal_name_of_client() const {
  return _impl_.name_of_client_.Get();
}
inline void Client::_internal_set_name_of_client(const std::string& value) {
  
  _impl_.name_of_client_.Set(value, GetArenaForAllocation());
}
inline std::string* Client::_internal_mutable_name_of_client() {
  
  return _impl_.name_of_client_.Mutable(GetArenaForAllocation());
}
inline std::string* Client::release_name_of_client() {
  // @@protoc_insertion_point(field_release:Client.name_of_client)
  return _impl_.name_of_client_.Release();
}
inline void Client::set_allocated_name_of_client(std::string* name_of_client) {
  if (name_of_client != nullptr) {
    
  } else {
    
  }
  _impl_.name_of_client_.SetAllocated(name_of_client, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_of_client_.IsDefault()) {
    _impl_.name_of_client_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client.name_of_client)
}

// string cellphone_of_client = 3;
inline void Client::clear_cellphone_of_client() {
  _impl_.cellphone_of_client_.ClearToEmpty();
}
inline const std::string& Client::cellphone_of_client() const {
  // @@protoc_insertion_point(field_get:Client.cellphone_of_client)
  return _internal_cellphone_of_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Client::set_cellphone_of_client(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cellphone_of_client_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client.cellphone_of_client)
}
inline std::string* Client::mutable_cellphone_of_client() {
  std::string* _s = _internal_mutable_cellphone_of_client();
  // @@protoc_insertion_point(field_mutable:Client.cellphone_of_client)
  return _s;
}
inline const std::string& Client::_internal_cellphone_of_client() const {
  return _impl_.cellphone_of_client_.Get();
}
inline void Client::_internal_set_cellphone_of_client(const std::string& value) {
  
  _impl_.cellphone_of_client_.Set(value, GetArenaForAllocation());
}
inline std::string* Client::_internal_mutable_cellphone_of_client() {
  
  return _impl_.cellphone_of_client_.Mutable(GetArenaForAllocation());
}
inline std::string* Client::release_cellphone_of_client() {
  // @@protoc_insertion_point(field_release:Client.cellphone_of_client)
  return _impl_.cellphone_of_client_.Release();
}
inline void Client::set_allocated_cellphone_of_client(std::string* cellphone_of_client) {
  if (cellphone_of_client != nullptr) {
    
  } else {
    
  }
  _impl_.cellphone_of_client_.SetAllocated(cellphone_of_client, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cellphone_of_client_.IsDefault()) {
    _impl_.cellphone_of_client_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client.cellphone_of_client)
}

// string email_of_client = 4;
inline void Client::clear_email_of_client() {
  _impl_.email_of_client_.ClearToEmpty();
}
inline const std::string& Client::email_of_client() const {
  // @@protoc_insertion_point(field_get:Client.email_of_client)
  return _internal_email_of_client();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Client::set_email_of_client(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_of_client_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client.email_of_client)
}
inline std::string* Client::mutable_email_of_client() {
  std::string* _s = _internal_mutable_email_of_client();
  // @@protoc_insertion_point(field_mutable:Client.email_of_client)
  return _s;
}
inline const std::string& Client::_internal_email_of_client() const {
  return _impl_.email_of_client_.Get();
}
inline void Client::_internal_set_email_of_client(const std::string& value) {
  
  _impl_.email_of_client_.Set(value, GetArenaForAllocation());
}
inline std::string* Client::_internal_mutable_email_of_client() {
  
  return _impl_.email_of_client_.Mutable(GetArenaForAllocation());
}
inline std::string* Client::release_email_of_client() {
  // @@protoc_insertion_point(field_release:Client.email_of_client)
  return _impl_.email_of_client_.Release();
}
inline void Client::set_allocated_email_of_client(std::string* email_of_client) {
  if (email_of_client != nullptr) {
    
  } else {
    
  }
  _impl_.email_of_client_.SetAllocated(email_of_client, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_of_client_.IsDefault()) {
    _impl_.email_of_client_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client.email_of_client)
}

// repeated string clients_details = 5;
inline int Client::_internal_clients_details_size() const {
  return _impl_.clients_details_.size();
}
inline int Client::clients_details_size() const {
  return _internal_clients_details_size();
}
inline void Client::clear_clients_details() {
  _impl_.clients_details_.Clear();
}
inline std::string* Client::add_clients_details() {
  std::string* _s = _internal_add_clients_details();
  // @@protoc_insertion_point(field_add_mutable:Client.clients_details)
  return _s;
}
inline const std::string& Client::_internal_clients_details(int index) const {
  return _impl_.clients_details_.Get(index);
}
inline const std::string& Client::clients_details(int index) const {
  // @@protoc_insertion_point(field_get:Client.clients_details)
  return _internal_clients_details(index);
}
inline std::string* Client::mutable_clients_details(int index) {
  // @@protoc_insertion_point(field_mutable:Client.clients_details)
  return _impl_.clients_details_.Mutable(index);
}
inline void Client::set_clients_details(int index, const std::string& value) {
  _impl_.clients_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Client.clients_details)
}
inline void Client::set_clients_details(int index, std::string&& value) {
  _impl_.clients_details_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Client.clients_details)
}
inline void Client::set_clients_details(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.clients_details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Client.clients_details)
}
inline void Client::set_clients_details(int index, const char* value, size_t size) {
  _impl_.clients_details_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Client.clients_details)
}
inline std::string* Client::_internal_add_clients_details() {
  return _impl_.clients_details_.Add();
}
inline void Client::add_clients_details(const std::string& value) {
  _impl_.clients_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Client.clients_details)
}
inline void Client::add_clients_details(std::string&& value) {
  _impl_.clients_details_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Client.clients_details)
}
inline void Client::add_clients_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.clients_details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Client.clients_details)
}
inline void Client::add_clients_details(const char* value, size_t size) {
  _impl_.clients_details_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Client.clients_details)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Client::clients_details() const {
  // @@protoc_insertion_point(field_list:Client.clients_details)
  return _impl_.clients_details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Client::mutable_clients_details() {
  // @@protoc_insertion_point(field_mutable_list:Client.clients_details)
  return &_impl_.clients_details_;
}

// -------------------------------------------------------------------

// ClienteId

// string client_id = 1;
inline void ClienteId::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& ClienteId::client_id() const {
  // @@protoc_insertion_point(field_get:ClienteId.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClienteId::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClienteId.client_id)
}
inline std::string* ClienteId::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ClienteId.client_id)
  return _s;
}
inline const std::string& ClienteId::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void ClienteId::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClienteId::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClienteId::release_client_id() {
  // @@protoc_insertion_point(field_release:ClienteId.client_id)
  return _impl_.client_id_.Release();
}
inline void ClienteId::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClienteId.client_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_5fRegister_2eproto
