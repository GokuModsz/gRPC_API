// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: model_services/InvoicesService.proto

#include "model_services/InvoicesService.pb.h"
#include "model_services/InvoicesService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TestApiGrpc {
namespace Protos {
namespace models {

static const char* InvoicesService_method_names[] = {
  "/TestApiGrpc.Protos.models.InvoicesService/CreateInvoices",
  "/TestApiGrpc.Protos.models.InvoicesService/ListInvoices",
};

std::unique_ptr< InvoicesService::Stub> InvoicesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InvoicesService::Stub> stub(new InvoicesService::Stub(channel, options));
  return stub;
}

InvoicesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateInvoices_(InvoicesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInvoices_(InvoicesService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InvoicesService::Stub::CreateInvoices(::grpc::ClientContext* context, const ::TestApiGrpc::Protos::models::Invoices& request, ::TestApiGrpc::Protos::models::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TestApiGrpc::Protos::models::Invoices, ::TestApiGrpc::Protos::models::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateInvoices_, context, request, response);
}

void InvoicesService::Stub::async::CreateInvoices(::grpc::ClientContext* context, const ::TestApiGrpc::Protos::models::Invoices* request, ::TestApiGrpc::Protos::models::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TestApiGrpc::Protos::models::Invoices, ::TestApiGrpc::Protos::models::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInvoices_, context, request, response, std::move(f));
}

void InvoicesService::Stub::async::CreateInvoices(::grpc::ClientContext* context, const ::TestApiGrpc::Protos::models::Invoices* request, ::TestApiGrpc::Protos::models::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInvoices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TestApiGrpc::Protos::models::ServiceStatus>* InvoicesService::Stub::PrepareAsyncCreateInvoicesRaw(::grpc::ClientContext* context, const ::TestApiGrpc::Protos::models::Invoices& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TestApiGrpc::Protos::models::ServiceStatus, ::TestApiGrpc::Protos::models::Invoices, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateInvoices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TestApiGrpc::Protos::models::ServiceStatus>* InvoicesService::Stub::AsyncCreateInvoicesRaw(::grpc::ClientContext* context, const ::TestApiGrpc::Protos::models::Invoices& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateInvoicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InvoicesService::Stub::ListInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::TestApiGrpc::Protos::models::ListInvoicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::TestApiGrpc::Protos::models::ListInvoicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListInvoices_, context, request, response);
}

void InvoicesService::Stub::async::ListInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::TestApiGrpc::Protos::models::ListInvoicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::TestApiGrpc::Protos::models::ListInvoicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInvoices_, context, request, response, std::move(f));
}

void InvoicesService::Stub::async::ListInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::TestApiGrpc::Protos::models::ListInvoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInvoices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TestApiGrpc::Protos::models::ListInvoicesResponse>* InvoicesService::Stub::PrepareAsyncListInvoicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TestApiGrpc::Protos::models::ListInvoicesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListInvoices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TestApiGrpc::Protos::models::ListInvoicesResponse>* InvoicesService::Stub::AsyncListInvoicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListInvoicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

InvoicesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InvoicesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InvoicesService::Service, ::TestApiGrpc::Protos::models::Invoices, ::TestApiGrpc::Protos::models::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InvoicesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TestApiGrpc::Protos::models::Invoices* req,
             ::TestApiGrpc::Protos::models::ServiceStatus* resp) {
               return service->CreateInvoices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InvoicesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InvoicesService::Service, ::google::protobuf::Empty, ::TestApiGrpc::Protos::models::ListInvoicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InvoicesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::TestApiGrpc::Protos::models::ListInvoicesResponse* resp) {
               return service->ListInvoices(ctx, req, resp);
             }, this)));
}

InvoicesService::Service::~Service() {
}

::grpc::Status InvoicesService::Service::CreateInvoices(::grpc::ServerContext* context, const ::TestApiGrpc::Protos::models::Invoices* request, ::TestApiGrpc::Protos::models::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InvoicesService::Service::ListInvoices(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::TestApiGrpc::Protos::models::ListInvoicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TestApiGrpc
}  // namespace Protos
}  // namespace models

