// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AllServices.proto

#include "AllServices.pb.h"
#include "AllServices.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TEST_API_GRPC {

static const char* ClientService_method_names[] = {
  "/TEST_API_GRPC.ClientService/CreateClient",
  "/TEST_API_GRPC.ClientService/ListClient",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel, options));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateClient_(ClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListClient_(ClientService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::CreateClient(::grpc::ClientContext* context, const ::Client& request, ::TEST_API_GRPC::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Client, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateClient_, context, request, response);
}

void ClientService::Stub::async::CreateClient(::grpc::ClientContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Client, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateClient_, context, request, response, std::move(f));
}

void ClientService::Stub::async::CreateClient(::grpc::ClientContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* ClientService::Stub::PrepareAsyncCreateClientRaw(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TEST_API_GRPC::ServiceStatus, ::Client, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* ClientService::Stub::AsyncCreateClientRaw(::grpc::ClientContext* context, const ::Client& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::ListClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListClient_, context, request, response);
}

void ClientService::Stub::async::ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::ListClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClient_, context, request, response, std::move(f));
}

void ClientService::Stub::async::ListClient(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListClientResponse>* ClientService::Stub::PrepareAsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ListClientResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ListClientResponse>* ClientService::Stub::AsyncListClientRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::Client, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Client* req,
             ::TEST_API_GRPC::ServiceStatus* resp) {
               return service->CreateClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::google::protobuf::Empty, ::ListClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::ListClientResponse* resp) {
               return service->ListClient(ctx, req, resp);
             }, this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::CreateClient(::grpc::ServerContext* context, const ::Client* request, ::TEST_API_GRPC::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::ListClient(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ProductService_method_names[] = {
  "/TEST_API_GRPC.ProductService/CreateProduct",
  "/TEST_API_GRPC.ProductService/ListProduct",
};

std::unique_ptr< ProductService::Stub> ProductService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProductService::Stub> stub(new ProductService::Stub(channel, options));
  return stub;
}

ProductService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateProduct_(ProductService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProduct_(ProductService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProductService::Stub::CreateProduct(::grpc::ClientContext* context, const ::Product& request, ::TEST_API_GRPC::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Product, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProduct_, context, request, response);
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Product, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* ProductService::Stub::PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TEST_API_GRPC::ServiceStatus, ::Product, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* ProductService::Stub::AsyncCreateProductRaw(::grpc::ClientContext* context, const ::Product& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::ListProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListProduct_, context, request, response);
}

void ProductService::Stub::async::ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::ListProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::ListProduct(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListProductResponse>* ProductService::Stub::PrepareAsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ListProductResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ListProductResponse>* ProductService::Stub::AsyncListProductRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProductService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::Product, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Product* req,
             ::TEST_API_GRPC::ServiceStatus* resp) {
               return service->CreateProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::google::protobuf::Empty, ::ListProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::ListProductResponse* resp) {
               return service->ListProduct(ctx, req, resp);
             }, this)));
}

ProductService::Service::~Service() {
}

::grpc::Status ProductService::Service::CreateProduct(::grpc::ServerContext* context, const ::Product* request, ::TEST_API_GRPC::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::ListProduct(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* FactureService_method_names[] = {
  "/TEST_API_GRPC.FactureService/CreateFacture",
  "/TEST_API_GRPC.FactureService/ListFacture",
};

std::unique_ptr< FactureService::Stub> FactureService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FactureService::Stub> stub(new FactureService::Stub(channel, options));
  return stub;
}

FactureService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateFacture_(FactureService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFacture_(FactureService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FactureService::Stub::CreateFacture(::grpc::ClientContext* context, const ::Facture& request, ::TEST_API_GRPC::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Facture, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateFacture_, context, request, response);
}

void FactureService::Stub::async::CreateFacture(::grpc::ClientContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Facture, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFacture_, context, request, response, std::move(f));
}

void FactureService::Stub::async::CreateFacture(::grpc::ClientContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateFacture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* FactureService::Stub::PrepareAsyncCreateFactureRaw(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TEST_API_GRPC::ServiceStatus, ::Facture, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateFacture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* FactureService::Stub::AsyncCreateFactureRaw(::grpc::ClientContext* context, const ::Facture& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateFactureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FactureService::Stub::ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListFactureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::ListFactureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFacture_, context, request, response);
}

void FactureService::Stub::async::ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::ListFactureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFacture_, context, request, response, std::move(f));
}

void FactureService::Stub::async::ListFacture(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFacture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListFactureResponse>* FactureService::Stub::PrepareAsyncListFactureRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ListFactureResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFacture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ListFactureResponse>* FactureService::Stub::AsyncListFactureRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFactureRaw(context, request, cq);
  result->StartCall();
  return result;
}

FactureService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FactureService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FactureService::Service, ::Facture, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FactureService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Facture* req,
             ::TEST_API_GRPC::ServiceStatus* resp) {
               return service->CreateFacture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FactureService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FactureService::Service, ::google::protobuf::Empty, ::ListFactureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FactureService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::ListFactureResponse* resp) {
               return service->ListFacture(ctx, req, resp);
             }, this)));
}

FactureService::Service::~Service() {
}

::grpc::Status FactureService::Service::CreateFacture(::grpc::ServerContext* context, const ::Facture* request, ::TEST_API_GRPC::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FactureService::Service::ListFacture(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListFactureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* InvoiceService_method_names[] = {
  "/TEST_API_GRPC.InvoiceService/CreateInvoice",
  "/TEST_API_GRPC.InvoiceService/ListInvoice",
};

std::unique_ptr< InvoiceService::Stub> InvoiceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InvoiceService::Stub> stub(new InvoiceService::Stub(channel, options));
  return stub;
}

InvoiceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateInvoice_(InvoiceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInvoice_(InvoiceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InvoiceService::Stub::CreateInvoice(::grpc::ClientContext* context, const ::Invoice& request, ::TEST_API_GRPC::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Invoice, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateInvoice_, context, request, response);
}

void InvoiceService::Stub::async::CreateInvoice(::grpc::ClientContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Invoice, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInvoice_, context, request, response, std::move(f));
}

void InvoiceService::Stub::async::CreateInvoice(::grpc::ClientContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInvoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* InvoiceService::Stub::PrepareAsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TEST_API_GRPC::ServiceStatus, ::Invoice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateInvoice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TEST_API_GRPC::ServiceStatus>* InvoiceService::Stub::AsyncCreateInvoiceRaw(::grpc::ClientContext* context, const ::Invoice& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateInvoiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InvoiceService::Stub::ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ListInvoiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::ListInvoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListInvoice_, context, request, response);
}

void InvoiceService::Stub::async::ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::ListInvoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInvoice_, context, request, response, std::move(f));
}

void InvoiceService::Stub::async::ListInvoice(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInvoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>* InvoiceService::Stub::PrepareAsyncListInvoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ListInvoiceResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListInvoice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ListInvoiceResponse>* InvoiceService::Stub::AsyncListInvoiceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListInvoiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

InvoiceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InvoiceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InvoiceService::Service, ::Invoice, ::TEST_API_GRPC::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InvoiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Invoice* req,
             ::TEST_API_GRPC::ServiceStatus* resp) {
               return service->CreateInvoice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InvoiceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InvoiceService::Service, ::google::protobuf::Empty, ::ListInvoiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InvoiceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::ListInvoiceResponse* resp) {
               return service->ListInvoice(ctx, req, resp);
             }, this)));
}

InvoiceService::Service::~Service() {
}

::grpc::Status InvoiceService::Service::CreateInvoice(::grpc::ServerContext* context, const ::Invoice* request, ::TEST_API_GRPC::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InvoiceService::Service::ListInvoice(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ListInvoiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TEST_API_GRPC

